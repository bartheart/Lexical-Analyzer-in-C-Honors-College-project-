# Lexical Analyzer for a C Compiler  

Author: **Bemnet Mekrebu**  
Supervisor: **Dr. Tejasvi Parupudi**  
Date: **Spring 2023**  

---

## **Project Overview**  
This project, developed for the **Principles of Systems Programming (CSCE 3600)** class, implements a **Lexical Analyzer** for the C programming language. The analyzer scans a source code file, processes its content, and outputs a series of meaningful **tokens** for use in the next stage of compilation (syntax analysis).  

---

## **Table of Contents**  
1. [Project Background](#project-background)  
2. [Objectives](#objectives)  
3. [Features](#features)  
4. [Technologies Used](#technologies-used)  
5. [How It Works](#how-it-works)  
6. [File Structure](#file-structure)  
7. [Usage](#usage)  
8. [Acknowledgments](#acknowledgments)  

---

## **Project Background**  
A **Lexical Analyzer** is the first stage of a compiler. It scans the source code character by character, grouping them into **tokens** based on predefined rules. These tokens serve as the building blocks for the syntax analyzer, which interprets the structure of the code.

**Key Features of a Lexical Analyzer:**  
- Identifies keywords, identifiers, operators, literals, and symbols.  
- Handles comments and white spaces.  
- Prepares data for the syntax analysis phase.  

---

## **Objectives**  
The primary objectives of this project are:  
- To **parse and tokenize C source code** into identifiable components.  
- To **handle complex constructs** such as multi-line comments and escape characters.  
- To provide **clear debugging outputs** and token counts.  

---

## **Features**  
- **Tokenization:** Breaks the source code into meaningful tokens (keywords, literals, symbols, etc.).  
- **Input Buffering:** Pre-processes input to remove comments and handle white spaces effectively.  
- **Error Handling:** Outputs informative error messages for debugging.  
- **Comment Handling:** Supports inline (`//`) and block (`/* */`) comments.  
- **Finite State Machine:** Tracks the state transitions of characters for efficient parsing.  
- **Debugging Mode:** Outputs detailed logs for analysis.  

---

## **Technologies Used**  
- **Programming Language:** C  
- **Libraries:** Standard C Libraries, Third-party libraries (for input handling and debugging).  

---

## **How It Works**  

### Input Buffer  
Stores the input temporarily to optimize file access and pre-process the content.  
- Removes comments.  
- Outputs debugging information.  
- Tracks line, column, and character positions.  

### Tokenizer  
Processes the input buffer and generates tokens:  
1. Reads input using `next_character()`.  
2. Groups characters based on predefined token rules using a **finite state machine**.  
3. Outputs an array of tokens.  

### Comment Handler  
Skips characters based on the type of comment:  
- **Inline Comments:** Skips characters after `//` until a new line is encountered.  
- **Block Comments:** Skips characters between `/*` and `*/` (handles multi-line comments).  

### Error Handler  
Detects and outputs syntax errors with position tracking for easy debugging.  

---

## **File Structure**  
```plaintext
src/
│── lexer.c          # Main program logic for lexical analysis
│── input_handler.c  # Handles input preprocessing and buffering
│── tokenizer.c      # Tokenization logic
│── error_handler.c  # Error detection and reporting
tests/
│── test_input.c     # Sample C programs for testing
output/
│── tokens.txt       # Generated token output
docs/
│── README.md        # Documentation
│── demo.mp4         # Demo video
